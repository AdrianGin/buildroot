From ee65d34c1acb7a8041375962b0371ca0500dde53 Mon Sep 17 00:00:00 2001
From: "james.lin" <james.lin@rock-chips.com>
Date: Mon, 16 Apr 2018 10:29:03 +0800
Subject: [PATCH] multiqueue: 1. Don't start new pads until parented           
  2. Full care about both bytes and time

Signed-off-by: james.lin <james.lin@rock-chips.com>
---
 plugins/elements/gstmultiqueue.c | 137 ++++++++++++++++++++++++++++-----------
 1 file changed, 99 insertions(+), 38 deletions(-)
 mode change 100644 => 100755 plugins/elements/gstmultiqueue.c

diff --git a/plugins/elements/gstmultiqueue.c b/plugins/elements/gstmultiqueue.c
old mode 100644
new mode 100755
index d8c6ca1..98bd9bd
--- a/plugins/elements/gstmultiqueue.c
+++ b/plugins/elements/gstmultiqueue.c
@@ -150,6 +150,7 @@ struct _GstSingleQueue
   GstDataQueueSize max_size, extra_size;
   GstClockTime cur_time;
   gboolean is_eos;
+  gboolean is_segment_done;
   gboolean is_sparse;
   gboolean flushing;
   gboolean active;
@@ -168,7 +169,8 @@ struct _GstSingleQueue
   GstQuery *last_handled_query;
 
   /* For interleave calculation */
-  GThread *thread;
+  GThread *thread;              /* Streaming thread of SingleQueue */
+  GstClockTime interleave;      /* Calculated interleve within the thread */
 };
 
 
@@ -203,7 +205,7 @@ static void recheck_buffering_status (GstMultiQueue * mq);
 
 static void gst_single_queue_flush_queue (GstSingleQueue * sq, gboolean full);
 
-static void calculate_interleave (GstMultiQueue * mq);
+static void calculate_interleave (GstMultiQueue * mq, GstSingleQueue * sq);
 
 static GstStaticPadTemplate sinktemplate = GST_STATIC_PAD_TEMPLATE ("sink_%u",
     GST_PAD_SINK,
@@ -806,7 +808,7 @@ gst_multi_queue_set_property (GObject * object, guint prop_id,
       GST_MULTI_QUEUE_MUTEX_LOCK (mq);
       mq->min_interleave_time = g_value_get_uint64 (value);
       if (mq->use_interleave)
-        calculate_interleave (mq);
+        calculate_interleave (mq, NULL);
       GST_MULTI_QUEUE_MUTEX_UNLOCK (mq);
       break;
     default:
@@ -1045,11 +1047,39 @@ gst_multi_queue_change_state (GstElement * element, GstStateChange transition)
 }
 
 static gboolean
-gst_single_queue_flush (GstMultiQueue * mq, GstSingleQueue * sq, gboolean flush,
-    gboolean full)
+gst_single_queue_start (GstMultiQueue * mq, GstSingleQueue * sq)
+{
+  GST_LOG_OBJECT (mq, "SingleQueue %d : starting task", sq->id);
+  return gst_pad_start_task (sq->srcpad,
+      (GstTaskFunction) gst_multi_queue_loop, sq->srcpad, NULL);
+}
+
+static gboolean
+gst_single_queue_pause (GstMultiQueue * mq, GstSingleQueue * sq)
 {
   gboolean result;
 
+  GST_LOG_OBJECT (mq, "SingleQueue %d : pausing task", sq->id);
+  result = gst_pad_pause_task (sq->srcpad);
+  sq->sink_tainted = sq->src_tainted = TRUE;
+  return result;
+}
+
+static gboolean
+gst_single_queue_stop (GstMultiQueue * mq, GstSingleQueue * sq)
+{
+  gboolean result;
+
+  GST_LOG_OBJECT (mq, "SingleQueue %d : stopping task", sq->id);
+  result = gst_pad_stop_task (sq->srcpad);
+  sq->sink_tainted = sq->src_tainted = TRUE;
+  return result;
+}
+
+static void
+gst_single_queue_flush (GstMultiQueue * mq, GstSingleQueue * sq, gboolean flush,
+    gboolean full)
+{
   GST_DEBUG_OBJECT (mq, "flush %s queue %d", (flush ? "start" : "stop"),
       sq->id);
 
@@ -1067,10 +1097,6 @@ gst_single_queue_flush (GstMultiQueue * mq, GstSingleQueue * sq, gboolean flush,
     sq->last_query = FALSE;
     g_cond_signal (&sq->query_handled);
     GST_MULTI_QUEUE_MUTEX_UNLOCK (mq);
-
-    GST_LOG_OBJECT (mq, "SingleQueue %d : pausing task", sq->id);
-    result = gst_pad_pause_task (sq->srcpad);
-    sq->sink_tainted = sq->src_tainted = TRUE;
   } else {
     gst_single_queue_flush_queue (sq, full);
 
@@ -1084,6 +1110,7 @@ gst_single_queue_flush (GstMultiQueue * mq, GstSingleQueue * sq, gboolean flush,
     sq->cur_time = 0;
     sq->max_size.visible = mq->max_size.visible;
     sq->is_eos = FALSE;
+    sq->is_segment_done = FALSE;
     sq->nextid = 0;
     sq->oldid = 0;
     sq->last_oldid = G_MAXUINT32;
@@ -1101,13 +1128,7 @@ gst_single_queue_flush (GstMultiQueue * mq, GstSingleQueue * sq, gboolean flush,
 
     sq->flushing = FALSE;
     GST_MULTI_QUEUE_MUTEX_UNLOCK (mq);
-
-    GST_LOG_OBJECT (mq, "SingleQueue %d : starting task", sq->id);
-    result =
-        gst_pad_start_task (sq->srcpad, (GstTaskFunction) gst_multi_queue_loop,
-        sq->srcpad, NULL);
   }
-  return result;
 }
 
 /* WITH LOCK TAKEN */
@@ -1125,7 +1146,8 @@ get_buffering_level (GstSingleQueue * sq)
       size.bytes, sq->max_size.bytes, sq->cur_time, sq->max_size.time);
 
   /* get bytes and time buffer levels and take the max */
-  if (sq->is_eos || sq->srcresult == GST_FLOW_NOT_LINKED || sq->is_sparse) {
+  if (sq->is_eos || sq->is_segment_done || sq->srcresult == GST_FLOW_NOT_LINKED
+      || sq->is_sparse) {
     buffering_level = MAX_BUFFERING_LEVEL;
   } else {
     buffering_level = 0;
@@ -1259,41 +1281,49 @@ recheck_buffering_status (GstMultiQueue * mq)
 }
 
 static void
-calculate_interleave (GstMultiQueue * mq)
+calculate_interleave (GstMultiQueue * mq, GstSingleQueue * sq)
 {
   GstClockTimeDiff low, high;
-  GstClockTime interleave;
+  GstClockTime interleave, other_interleave = 0;
   GList *tmp;
 
   low = high = GST_CLOCK_STIME_NONE;
   interleave = mq->interleave;
   /* Go over all single queues and calculate lowest/highest value */
   for (tmp = mq->queues; tmp; tmp = tmp->next) {
-    GstSingleQueue *sq = (GstSingleQueue *) tmp->data;
+    GstSingleQueue *oq = (GstSingleQueue *) tmp->data;
     /* Ignore sparse streams for interleave calculation */
-    if (sq->is_sparse)
+    if (oq->is_sparse)
       continue;
     /* If a stream is not active yet (hasn't received any buffers), set
      * a maximum interleave to allow it to receive more data */
-    if (!sq->active) {
+    if (!oq->active) {
       GST_LOG_OBJECT (mq,
-          "queue %d is not active yet, forcing interleave to 5s", sq->id);
+          "queue %d is not active yet, forcing interleave to 5s", oq->id);
       mq->interleave = 5 * GST_SECOND;
       /* Update max-size time */
       mq->max_size.time = mq->interleave;
       SET_CHILD_PROPERTY (mq, time);
       goto beach;
     }
-    if (GST_CLOCK_STIME_IS_VALID (sq->cached_sinktime)) {
-      if (low == GST_CLOCK_STIME_NONE || sq->cached_sinktime < low)
-        low = sq->cached_sinktime;
-      if (high == GST_CLOCK_STIME_NONE || sq->cached_sinktime > high)
-        high = sq->cached_sinktime;
+
+    /* Calculate within each streaming thread */
+    if (sq && sq->thread != oq->thread) {
+      if (oq->interleave > other_interleave)
+        other_interleave = oq->interleave;
+      continue;
+    }
+
+    if (GST_CLOCK_STIME_IS_VALID (oq->cached_sinktime)) {
+      if (low == GST_CLOCK_STIME_NONE || oq->cached_sinktime < low)
+        low = oq->cached_sinktime;
+      if (high == GST_CLOCK_STIME_NONE || oq->cached_sinktime > high)
+        high = oq->cached_sinktime;
     }
     GST_LOG_OBJECT (mq,
         "queue %d , sinktime:%" GST_STIME_FORMAT " low:%" GST_STIME_FORMAT
-        " high:%" GST_STIME_FORMAT, sq->id,
-        GST_STIME_ARGS (sq->cached_sinktime), GST_STIME_ARGS (low),
+        " high:%" GST_STIME_FORMAT, oq->id,
+        GST_STIME_ARGS (oq->cached_sinktime), GST_STIME_ARGS (low),
         GST_STIME_ARGS (high));
   }
 
@@ -1301,6 +1331,10 @@ calculate_interleave (GstMultiQueue * mq)
     interleave = high - low;
     /* Padding of interleave and minimum value */
     interleave = (150 * interleave / 100) + mq->min_interleave_time;
+    if (sq)
+      sq->interleave = interleave;
+
+    interleave = MAX (interleave, other_interleave);
 
     /* Update the stored interleave if:
      * * No data has arrived yet (high == low)
@@ -1359,7 +1393,7 @@ update_time_level (GstMultiQueue * mq, GstSingleQueue * sq)
       sq->sink_tainted = FALSE;
       if (mq->use_interleave) {
         sq->cached_sinktime = sink_time;
-        calculate_interleave (mq);
+        calculate_interleave (mq, sq);
       }
     }
   } else
@@ -1613,11 +1647,19 @@ gst_single_queue_push_one (GstMultiQueue * mq, GstSingleQueue * sq,
     event = GST_EVENT_CAST (object);
 
     switch (GST_EVENT_TYPE (event)) {
+      case GST_EVENT_SEGMENT_DONE:
+        *allow_drop = FALSE;
+        break;
       case GST_EVENT_EOS:
         result = GST_FLOW_EOS;
         if (G_UNLIKELY (*allow_drop))
           *allow_drop = FALSE;
         break;
+      case GST_EVENT_STREAM_START:
+        result = GST_FLOW_OK;
+        if (G_UNLIKELY (*allow_drop))
+          *allow_drop = FALSE;
+        break;
       case GST_EVENT_SEGMENT:
         apply_segment (mq, sq, event, &sq->src_segment);
         /* Applying the segment may have made the queue non-full again, unblock it if needed */
@@ -2021,7 +2063,7 @@ out_flushing:
      * has returned an error flow return. After EOS there
      * will be no further buffer which could propagate the
      * error upstream */
-    if (sq->is_eos && sq->srcresult < GST_FLOW_EOS) {
+    if ((sq->is_eos || sq->is_segment_done) && sq->srcresult < GST_FLOW_EOS) {
       GST_MULTI_QUEUE_MUTEX_UNLOCK (mq);
       GST_ELEMENT_FLOW_ERROR (mq, sq->srcresult);
     } else {
@@ -2101,7 +2143,7 @@ gst_multi_queue_chain (GstPad * pad, GstObject * parent, GstBuffer * buffer)
           "Queue %d cached sink time now %" G_GINT64_FORMAT " %"
           GST_STIME_FORMAT, sq->id, sq->cached_sinktime,
           GST_STIME_ARGS (sq->cached_sinktime));
-      calculate_interleave (mq);
+      calculate_interleave (mq, sq);
     }
     GST_MULTI_QUEUE_MUTEX_UNLOCK (mq);
   }
@@ -2231,6 +2273,7 @@ gst_multi_queue_sink_event (GstPad * pad, GstObject * parent, GstEvent * event)
       res = gst_pad_push_event (sq->srcpad, event);
 
       gst_single_queue_flush (mq, sq, TRUE, FALSE);
+      gst_single_queue_pause (mq, sq);
       goto done;
 
     case GST_EVENT_FLUSH_STOP:
@@ -2240,9 +2283,11 @@ gst_multi_queue_sink_event (GstPad * pad, GstObject * parent, GstEvent * event)
       res = gst_pad_push_event (sq->srcpad, event);
 
       gst_single_queue_flush (mq, sq, FALSE, FALSE);
+      gst_single_queue_start (mq, sq);
       goto done;
 
     case GST_EVENT_SEGMENT:
+      sq->is_segment_done = FALSE;
       sref = gst_event_ref (event);
       break;
     case GST_EVENT_GAP:
@@ -2260,7 +2305,7 @@ gst_multi_queue_sink_event (GstPad * pad, GstObject * parent, GstEvent * event)
           stime = my_segment_to_running_time (&sq->sink_segment, val);
           if (GST_CLOCK_STIME_IS_VALID (stime)) {
             sq->cached_sinktime = stime;
-            calculate_interleave (mq);
+            calculate_interleave (mq, sq);
           }
           GST_MULTI_QUEUE_MUTEX_UNLOCK (mq);
         }
@@ -2294,6 +2339,14 @@ gst_multi_queue_sink_event (GstPad * pad, GstObject * parent, GstEvent * event)
   /* mark EOS when we received one, we must do that after putting the
    * buffer in the queue because EOS marks the buffer as filled. */
   switch (type) {
+    case GST_EVENT_SEGMENT_DONE:
+      sq->is_segment_done = TRUE;
+      GST_MULTI_QUEUE_MUTEX_LOCK (mq);
+      update_buffering (mq, sq);
+      GST_MULTI_QUEUE_MUTEX_UNLOCK (mq);
+      single_queue_overrun_cb (sq->queue, sq);
+      gst_multi_queue_post_buffering (mq);
+      break;
     case GST_EVENT_EOS:
       GST_MULTI_QUEUE_MUTEX_LOCK (mq);
       sq->is_eos = TRUE;
@@ -2448,11 +2501,11 @@ gst_multi_queue_src_activate_mode (GstPad * pad, GstObject * parent,
   switch (mode) {
     case GST_PAD_MODE_PUSH:
       if (active) {
-        result = gst_single_queue_flush (mq, sq, FALSE, TRUE);
+        gst_single_queue_flush (mq, sq, FALSE, TRUE);
+        result = parent ? gst_single_queue_start (mq, sq) : TRUE;
       } else {
-        result = gst_single_queue_flush (mq, sq, TRUE, TRUE);
-        /* make sure streaming finishes */
-        result |= gst_pad_stop_task (pad);
+        gst_single_queue_flush (mq, sq, TRUE, TRUE);
+        result = gst_single_queue_stop (mq, sq);
       }
       break;
     default:
@@ -2814,7 +2867,7 @@ single_queue_check_full (GstDataQueue * dataq, guint visible, guint bytes,
       sq->max_size.bytes, sq->cur_time, sq->max_size.time);
 
   /* we are always filled on EOS */
-  if (sq->is_eos)
+  if (sq->is_eos || sq->is_segment_done)
     return TRUE;
 
   /* we never go past the max visible items unless we are in buffering mode */
@@ -2823,6 +2876,11 @@ single_queue_check_full (GstDataQueue * dataq, guint visible, guint bytes,
 
   /* check time or bytes */
   res = IS_FILLED (sq, bytes, bytes);
+
+  /* Here we care about both bytes and time */
+  if (!res)
+    return FALSE;
+
   /* We only care about limits in time if we're not a sparse stream or
    * we're not syncing by running time */
   if (!sq->is_sparse || !mq->sync_by_running_time) {
@@ -3022,6 +3080,9 @@ gst_single_queue_new (GstMultiQueue * mqueue, guint id)
   }
   gst_element_add_pad (GST_ELEMENT (mqueue), sq->srcpad);
   gst_element_add_pad (GST_ELEMENT (mqueue), sq->sinkpad);
+  if (GST_STATE_TARGET (mqueue) != GST_STATE_NULL) {
+    gst_single_queue_start (mqueue, sq);
+  }
   g_rec_mutex_unlock (GST_STATE_GET_LOCK (mqueue));
 
   GST_DEBUG_OBJECT (mqueue, "GstSingleQueue [%d] created and pads added",
-- 
2.7.4

